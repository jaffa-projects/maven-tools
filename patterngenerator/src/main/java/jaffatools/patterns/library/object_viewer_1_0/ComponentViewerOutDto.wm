// .//GEN-BEGIN:_1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 * 
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/ 
package $(BasePackage.Lower).components.$(Component.Lower).dto;

import java.util.*;
// .//GEN-END:_1_be
// Add additional imports//GEN-FIRST:_imports




// .//GEN-LAST:_imports
// .//GEN-BEGIN:_2_be
/** The output for the $(Component.Upper1).
 */
public class $(Component.Upper1)OutDto {


#foreach $field in $ResultsFields.values() #begin
#set $wm_dataType = ""
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_dataType = "String"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_dataType = "Long"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_dataType = "Double"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_dataType = "Boolean"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_dataType = "org.jaffa.datatypes.DateOnly"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_dataType = "org.jaffa.datatypes.DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_dataType = "org.jaffa.datatypes.Currency"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_dataType = "byte[]"
#end
    /** Holds value of property $(field.Name.Lower1). */
    private $wm_dataType $(field.Name.Lower1);

#end

#if ($RelatedObjects != null) #begin
#foreach $object in $RelatedObjects.values() #begin
    /** Holds an array of $(object.ObjectName.Upper1) objects to be returned. */
    private List $(object.ObjectName.Lower1)List;

#end
#end

    /** Default Constructor.*/    
    public $(Component.Upper1)OutDto() {

#if ($RelatedObjects != null) #begin
#foreach $object in $RelatedObjects.values() #begin
        $(object.ObjectName.Lower1)List = new ArrayList();
#end
#end
    }


#foreach $field in $ResultsFields.values() #begin
#set $wm_dataType = ""
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_dataType = "String"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_dataType = "Long"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_dataType = "Double"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_dataType = "Boolean"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_dataType = "org.jaffa.datatypes.DateOnly"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_dataType = "org.jaffa.datatypes.DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_dataType = "org.jaffa.datatypes.Currency"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_dataType = "byte[]"
#end
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $wm_dataType get$(field.Name.Upper1)() {
        return $(field.Name.Lower1);
    }
    
    /** Setter for property $(field.Name.Lower1).
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($wm_dataType $(field.Name.Lower1)) {

#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
        if ($(field.Name.Lower1) == null || $(field.Name.Lower1).length() == 0)
            this.$(field.Name.Lower1) = null;
        else
            this.$(field.Name.Lower1) = $(field.Name.Lower1);
#else
        this.$(field.Name.Lower1) = $(field.Name.Lower1);
#end
    }

#end

#if ($RelatedObjects != null) #begin
#foreach $object in $RelatedObjects.values() #begin
    /** Add $(object.ObjectName.Upper1) objects.
     * @param $(object.ObjectName.Lower1) $(object.ObjectName.Upper1).
     */    
    public void add$(object.ObjectName.Upper1)($(object.ObjectName.Upper1)Dto $(object.ObjectName.Lower1)) {
        $(object.ObjectName.Lower1)List.add($(object.ObjectName.Lower1));
    }
    
    /** Add $(object.ObjectName.Upper1) at the specified position.
     * @param $(object.ObjectName.Lower1) $(object.ObjectName.Upper1).
     * @param index The position at which the $(object.ObjectName.Upper1) is to be added.
     */    
    public void set$(object.ObjectName.Upper1)($(object.ObjectName.Upper1)Dto $(object.ObjectName.Lower1), int index) {
        //-- check bounds for index
        if ((index < 0) || (index > $(object.ObjectName.Lower1)List.size()))
            throw new IndexOutOfBoundsException();
        
        $(object.ObjectName.Lower1)List.set(index, $(object.ObjectName.Lower1));
    }
    
    /** Add an array of $(object.ObjectName.Upper1) objects. This will overwrite existing $(object.ObjectName.Upper1) objects.
     * @param objects An array of $(object.ObjectName.Upper1) objects.
     */    
    public void set$(object.ObjectName.Upper1)($(object.ObjectName.Upper1)Dto[] objects) {
        $(object.ObjectName.Lower1)List = Arrays.asList(objects);
    }
    
    /** Clear existing $(object.ObjectName.Upper1) objects.
     */    
    public void clear$(object.ObjectName.Upper1)() {
        $(object.ObjectName.Lower1)List.clear();
    }
    
    /** Remove $(object.ObjectName.Upper1) object.
     * @param $(object.ObjectName.Lower1) $(object.ObjectName.Upper1).
     * @return A true indicates a $(object.ObjectName.Upper1) object was removed. A false indicates, the $(object.ObjectName.Upper1) object was not found.
     */    
    public boolean remove$(object.ObjectName.Upper1)($(object.ObjectName.Upper1)Dto $(object.ObjectName.Lower1)) {
        return $(object.ObjectName.Lower1)List.remove($(object.ObjectName.Lower1));
    }
    
    /** Returns a $(object.ObjectName.Upper1) object from the specified position.
     * @param index The position index.
     * @return $(object.ObjectName.Upper1).
     */    
    public $(object.ObjectName.Upper1)Dto get$(object.ObjectName.Upper1)(int index) {
        //-- check bounds for index
        if ((index < 0) || (index > $(object.ObjectName.Lower1)List.size()))
            throw new IndexOutOfBoundsException();
        
        return ($(object.ObjectName.Upper1)Dto) $(object.ObjectName.Lower1)List.get(index);
    }
    
    /** Returns an array of $(object.ObjectName.Upper1) objects.
     * @return An array of $(object.ObjectName.Upper1) objects.
     */    
    public $(object.ObjectName.Upper1)Dto[] get$(object.ObjectName.Upper1)() {
        return ($(object.ObjectName.Upper1)Dto[]) $(object.ObjectName.Lower1)List.toArray(new $(object.ObjectName.Upper1)Dto[0]);
    }
    
    /** Returns a count of $(object.ObjectName.Upper1) objects.
     * @return The count of $(object.ObjectName.Upper1) objects.
     */    
    public int get$(object.ObjectName.Upper1)Count() {
        return $(object.ObjectName.Lower1)List.size();
    }

#end
#end


    /** Returns the debug information
     * @return The debug information
     */
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("<$(Component.Upper1)OutDto>");

#foreach $field in $ResultsFields.values() #begin
        buf.append("<$(field.Name.Lower1)>"); if ($(field.Name.Lower1) != null) buf.append($(field.Name.Lower1)); buf.append("</$(field.Name.Lower1)>");
#end


#if ($RelatedObjects != null) #begin
#foreach $object in $RelatedObjects.values() #begin
        buf.append("<$(object.ObjectName.Lower1)s>");
        $(object.ObjectName.Upper1)Dto[] $(object.ObjectName.Lower1)s = get$(object.ObjectName.Upper1)();
        for (int i = 0; i < $(object.ObjectName.Lower1)s.length; i++) {
            buf.append($(object.ObjectName.Lower1)s[i].toString());
        }
        buf.append("</$(object.ObjectName.Lower1)s>");

#end
#end
        buf.append("</$(Component.Upper1)OutDto>");
        return buf.toString();
    }
    
    // .//GEN-END:_2_be
    // All the custom code goes here //GEN-FIRST:_custom






    // .//GEN-LAST:_custom
}
