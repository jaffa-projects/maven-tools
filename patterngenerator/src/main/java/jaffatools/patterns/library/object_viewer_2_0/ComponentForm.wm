// .//GEN-BEGIN:_1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 * 
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/
package $(BasePackage.Lower).components.$(Component.Lower).ui;

import org.apache.log4j.Logger;
import org.jaffa.presentation.portlet.FormBase;
import org.jaffa.presentation.portlet.widgets.model.CheckBoxModel;
import $(BasePackage.Lower).components.$(Component.Lower).dto.$(Component.Upper1)OutDto;


#if ($RelatedObjects != null) #begin
import java.util.*;
import org.jaffa.presentation.portlet.widgets.model.GridModel;
import org.jaffa.presentation.portlet.widgets.model.GridModelRow;
import org.jaffa.presentation.portlet.widgets.controller.UserGridController;

#foreach $object in $RelatedObjects.values() #begin
import $(BasePackage.Lower).components.$(Component.Lower).dto.$(object.ObjectName.Upper1)Dto;
#end
#end
// .//GEN-END:_1_be
// Add additional imports//GEN-FIRST:_imports




// .//GEN-LAST:_imports
// .//GEN-BEGIN:_2_be
/** The FormBean class to support the View jsp of the $(Component.Upper1).
 */
public class $(Component.Upper1)Form extends FormBase {
    /** The name constant used for determining the corresponding jsp through the struts-config file.
     */    
    public static final String NAME = "$(Module.Lower)_$(Component.Lower1)";
    private static Logger log = Logger.getLogger($(Component.Upper1)Form.class);



#foreach $field in $ResultsFields.values() #begin
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(field.DataType.JavaDataType) get$(field.Name.Upper1)() {
        $(Component.Upper1)OutDto outputDto = (($(Component.Upper1)Component) getComponent()).get$(Component.Upper1)OutDto();
        return outputDto != null ? outputDto.get$(field.Name.Upper1)() : null;
    }


#if ($(field.DataType.DataTypeBoolean)) #begin
    /** Getter for property $(field.Name.Lower1). This is invoked by the custom tag, when the jsp is rendered, to get the current value.
     * @return Value of property $(field.Name.Lower1).
     */
    public CheckBoxModel get$(field.Name.Upper1)WM() {
        CheckBoxModel $(field.Name.Lower1) = (CheckBoxModel) getWidgetCache().getModel("$(field.Name.Lower1)");
        if ($(field.Name.Lower1) == null) {
            $(Component.Upper1)OutDto outputDto = (($(Component.Upper1)Component) getComponent()).get$(Component.Upper1)OutDto();
            $(field.Name.Lower1) = new CheckBoxModel(outputDto != null && outputDto.get$(field.Name.Upper1)() != null ? outputDto.get$(field.Name.Upper1)() : Boolean.FALSE);
            getWidgetCache().addModel("$(field.Name.Lower1)", $(field.Name.Lower1));
        }
        return $(field.Name.Lower1);
    }

#end
#end
    // .//GEN-END:_2_be

#if ($RelatedObjects != null) #begin
#foreach $object in $RelatedObjects.values() #begin
    // .//GEN-BEGIN:Related$(object.ObjectName.Upper1)_1_be
    /** Getter for property $(object.ObjectName.Upper1). This is invoked by the custom tag, when the jsp is rendered, to get the current value.
     * This gets the current data from the component.
     * @return Value of property $(object.ObjectName.Lower1).
     */
    public GridModel getRelated$(object.ObjectName.Upper1)WM() {
        GridModel rows = (GridModel) getWidgetCache().getModel("related$(object.ObjectName.Upper1)");
        if (rows == null) {
            rows = new GridModel();
            populateRelated$(object.ObjectName.Upper1)(rows);
            getWidgetCache().addModel("related$(object.ObjectName.Upper1)", rows);
        }
        return rows;
    }
    
    /** Setter for property $(object.ObjectName.Lower1). This is invoked by the servlet, when a post is done on the View screen.
     * It sets the selected rows on the model.
     * @param value New value of property $(object.ObjectName.Lower1).
     */
    public void setRelated$(object.ObjectName.Upper1)WV(String value) {
        UserGridController.updateModel(value, getRelated$(object.ObjectName.Upper1)WM(), this);
    }
    
    private void populateRelated$(object.ObjectName.Upper1)(GridModel rows) {
        rows.clearRows();
        $(Component.Upper1)OutDto outputDto = (($(Component.Upper1)Component) getComponent()).get$(Component.Upper1)OutDto();
        if (outputDto != null) {
            GridModelRow row = null;
            $(object.ObjectName.Upper1)Dto[] $(object.ObjectName.Lower1) = outputDto.get$(object.ObjectName.Upper1)();
            for (int i = 0; i < $(object.ObjectName.Lower1).length; i++) {
                $(object.ObjectName.Upper1)Dto rowDto = $(object.ObjectName.Lower1)[i];
                row = rows.newRow();

#foreach $field in $object.RelatedObjectFields.values() #begin
#if ($(field.DataType.DataTypeBoolean)) #begin
                row.addElement("$(field.Name.Lower1)", new CheckBoxModel( (rowDto.get$(field.Name.Upper1)() != null ? rowDto.get$(field.Name.Upper1)() : Boolean.FALSE) ));
#else
                row.addElement("$(field.Name.Lower1)", rowDto.get$(field.Name.Upper1)());
#end
#end
                // .//GEN-END:Related$(object.ObjectName.Upper1)_1_be
                // Add custom code for the row //GEN-FIRST:Related$(object.ObjectName.Upper1)_1


                // .//GEN-LAST:Related$(object.ObjectName.Upper1)_1
                // .//GEN-BEGIN:Related$(object.ObjectName.Upper1)_2_be
            }
        }
    }
    // .//GEN-END:Related$(object.ObjectName.Upper1)_2_be
#end
#end
    // All the custom code goes here //GEN-FIRST:_custom






    // .//GEN-LAST:_custom
}
