// .//GEN-BEGIN:1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 * 
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/ 
package $(DomainPackage.Lower);

import org.jaffa.datatypes.*;
import org.jaffa.metadata.*;
import org.jaffa.rules.RulesEngine;
import org.jaffa.persistence.Persistent;
import org.jaffa.persistence.exceptions.*;
import org.jaffa.beans.factory.config.StaticContext;
import org.jaffa.exceptions.FrameworkException;


#if ($(Relationships) != null) #begin
$ScratchPad.clear()
#foreach $relationship in $Relationships.values() #begin
#if ($(relationship.ToDomainPackage.Lower) != "") #begin
#set $wm_package = "$(relationship.ToDomainPackage.Lower).$(relationship.ToDomainObject.Upper1)"
#if ($ScratchPad.get($wm_package) == null) #begin
## the following 'if' statement is used to invoke the 'put' method
#if ($ScratchPad.put($wm_package,$wm_package) != null) #begin #end
import $(wm_package);
#end
#end
#end
#end
// .//GEN-END:1_be
// Add additional imports//GEN-FIRST:imports




// .//GEN-LAST:imports
// .//GEN-BEGIN:2_be
/**
 * Auto Generated Persistent class for the $(DatabaseTable) table.
 * @author  Auto-Generated
 */
public class $(DomainObject.Upper1) extends Persistent {


#foreach $field in $Fields.values() #begin
#if ($field.Ignore == null || $field.Ignore.Lower != "true") #begin
    /** Holds value of property $(field.Name.Lower1). */
    private $(field.DataType) m_$(field.Name.Lower1);

#end
#end

    /**
     * Default Constructor
     *
     * Calls the Static Context Factory to allow Spring to initialize this object
     */
    public $(DomainObject.Upper1)() {
        StaticContext.configure(this);
    }


    // .//GEN-END:2_be

#foreach $field in $Fields.values() #begin
#if ($field.Ignore == null || $field.Ignore.Lower != "true") #begin
    // .//GEN-BEGIN:$(field.Name.Lower1)_be
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(field.DataType) get$(field.Name.Upper1)() {
        return m_$(field.Name.Lower1);
    }
    
    /** Setter for property $(field.Name.Lower1).
     * WARNING: This is strictly for use by the Persistence Engine. A developer should never use this method. Instead, use the update(field.Name.Upper1) method.
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1)) {
        m_$(field.Name.Lower1) = $(field.Name.Lower1);
    }
    
    /** Use this method to update the property $(field.Name.Lower1).
     * This method will do nothing and simply return if the input value is the same as the current value.
     * Validation will be performed on the input value.
     * This will try to lock the underlying database row, in case CAUTIOUS locking is specified at the time of query.
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     * @throws ValidationException if an invalid value is passed.

#set $wm_throws = "ValidationException"
#if ($(field.PrimaryKey) != null && $(field.PrimaryKey.Upper) == "T") #begin
#set $wm_throws = "$(wm_throws), UpdatePrimaryKeyException"
     * @throws UpdatePrimaryKeyException if this domain object was loaded from the database.
#end
#set $wm_throws = "$(wm_throws), ReadOnlyObjectException, AlreadyLockedObjectException, FrameworkException"
     * @throws ReadOnlyObjectException if a Read-Only object is updated.
     * @throws AlreadyLockedObjectException if the underlying database row is already locked by another process.
     * @throws FrameworkException Indicates some system error
     */
    public void update$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1))
    throws $(wm_throws) {
        // ignore, if the current value and new value are the same
        if ( m_$(field.Name.Lower1) == null ? $(field.Name.Lower1) == null : m_$(field.Name.Lower1).equals($(field.Name.Lower1)) )
            return;


#if ($(field.PrimaryKey) != null && $(field.PrimaryKey.Upper) == "T") #begin
        // this is part of the primary key.. do not update if its a database occurence.
        if (isDatabaseOccurence())
            throw new UpdatePrimaryKeyException();
#end

        validate$(field.Name.Upper1)($(field.Name.Lower1));
        // .//GEN-END:$(field.Name.Lower1)_be
        // Add custom code before setting the value//GEN-FIRST:$(field.Name.Lower1)


        // .//GEN-LAST:$(field.Name.Lower1)
        // .//GEN-BEGIN:$(field.Name.Lower1)_1_be
        super.update();
        set$(field.Name.Upper1)($(field.Name.Lower1));
        // .//GEN-END:$(field.Name.Lower1)_1_be
        // Add custom code after setting the value//GEN-FIRST:$(field.Name.Lower1)_3


        // .//GEN-LAST:$(field.Name.Lower1)_3
        // .//GEN-BEGIN:$(field.Name.Lower1)_2_be
    }
    
    /** Use this method to validate a value for the property $(field.Name.Lower1).
     * @param $(field.Name.Lower1) Value to be validated for the property $(field.Name.Lower1).
     * @throws ValidationException if an invalid value is passed
     * @throws FrameworkException Indicates some system error
     */
    public void validate$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1))
    throws ValidationException, FrameworkException {
        // .//GEN-END:$(field.Name.Lower1)_2_be
        // Add custom code before validation//GEN-FIRST:$(field.Name.Lower1)_1


        // .//GEN-LAST:$(field.Name.Lower1)_1
        // .//GEN-BEGIN:$(field.Name.Lower1)_3_be

#if ($(field.DatabaseDataType.Upper) == "STRING" || $(field.DatabaseDataType.Upper) == "VARCHAR" || $(field.DatabaseDataType.Upper) == "LONGSTRING" || $(field.DatabaseDataType.Upper) == "LONGVARCHAR" || $(field.DatabaseDataType.Upper) == "CLOB") #begin
        FieldValidator.validate($(field.Name.Lower1), (StringFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "INTEGER" || $(field.DatabaseDataType.Upper) == "BIGINT") #begin
        FieldValidator.validate($(field.Name.Lower1), (IntegerFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DECIMAL" || $(field.DatabaseDataType.Upper) == "DOUBLE") #begin
        FieldValidator.validate($(field.Name.Lower1), (DecimalFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "BOOLEAN" || $(field.DatabaseDataType.Upper) == "BOOLEAN_BIT" || $(field.DatabaseDataType.Upper) == "BOOLEAN_TF" || $(field.DatabaseDataType.Upper) == "BOOLEAN_YN" || $(field.DatabaseDataType.Upper) == "BOOLEAN_10") #begin
        FieldValidator.validate($(field.Name.Lower1), (BooleanFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DATE_ONLY") #begin
        FieldValidator.validate($(field.Name.Lower1), (DateOnlyFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DATE_TIME") #begin
        FieldValidator.validate($(field.Name.Lower1), (DateTimeFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "CURRENCY") #begin
        FieldValidator.validate($(field.Name.Lower1), (CurrencyFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "RAW" || $(field.DatabaseDataType.Upper) == "LONGRAW" || $(field.DatabaseDataType.Upper) == "BLOB") #begin
        FieldValidator.validate($(field.Name.Lower1), (RawFieldMetaData) $(DomainObject.Upper1)Meta.META_$(field.Name.Static), true);
#else
        // do nothing
#end

        // Invoke the Dynamic Rules Engine
        RulesEngine.doAllValidationsForDomainField("$(DomainPackage.Lower).$(DomainObject.Upper1)", "$(field.Name.Upper1)", $(field.Name.Lower1), this.getUOW());

        // .//GEN-END:$(field.Name.Lower1)_3_be
        // Add custom code after a successful validation//GEN-FIRST:$(field.Name.Lower1)_2


        // .//GEN-LAST:$(field.Name.Lower1)_2
        // .//GEN-BEGIN:$(field.Name.Lower1)_4_be
    }
    // .//GEN-END:$(field.Name.Lower1)_4_be
#end
#end
    // .//GEN-BEGIN:3_be
    /** This returns the diagnostic information.
    * @return the diagnostic information.
    */
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("<$(DomainObject.Upper1)>");

#foreach $field in $Fields.values() #begin
#if ($field.Ignore == null || $field.Ignore.Lower != "true") #begin
        buf.append("<$(field.Name.Lower1)>"); if (m_$(field.Name.Lower1) != null) buf.append(m_$(field.Name.Lower1)); buf.append("</$(field.Name.Lower1)>");
#end
#end
        buf.append(super.toString());
        buf.append("</$(DomainObject.Upper1)>");
        return buf.toString();
    }


#if ($(Relationships) != null) #begin
#foreach $relationship in $Relationships.values() #begin
#set $wm_fromFields = ""
#set $wm_firstPass = "true"
#foreach $field in $relationship.FromFields.values() #begin
#if ($(wm_firstPass) == "true") #begin
#set $wm_firstPass = "false"
#else
#set $wm_fromFields = "$(wm_fromFields),"
#end
#set $wm_fromFields = "$(wm_fromFields)$(field.Name.Lower1)"
#end
#set $wm_toFields = ""
#set $wm_firstPass = "true"
#foreach $field in $relationship.ToFields.values() #begin
#if ($(wm_firstPass) == "true") #begin
#set $wm_firstPass = "false"
#else
#set $wm_toFields = "$(wm_toFields),"
#end
#set $wm_toFields = "$(wm_toFields)$(field.Name.Lower1)"
#end
    /**
     * @clientCardinality $(relationship.FromCardinality)
     * @supplierCardinality $(relationship.ToCardinality)
     * @clientQualifier $(wm_fromFields)
     * @supplierQualifier $(wm_toFields)
     * @link $(relationship.Type)
     */
    /*#$(relationship.ToDomainObject.Upper1) lnk$(relationship.ToDomainObject.Upper1);*/

#end
#end
    // .//GEN-END:3_be
    // All the custom code goes here//GEN-FIRST:custom






    // .//GEN-LAST:custom
}
