// .//GEN-BEGIN:1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 * 
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/ 
package $(StoredProcedurePackage.Lower);

import org.jaffa.persistence.Persistent;
import org.jaffa.persistence.engines.jdbcengine.IStoredProcedure;
import java.lang.reflect.Method;
import org.jaffa.datatypes.ValidationException;
import org.jaffa.datatypes.FieldValidator;
import org.jaffa.metadata.*;
// .//GEN-END:1_be
// Add additional imports//GEN-FIRST:imports




// .//GEN-LAST:imports
// .//GEN-BEGIN:2_be
/**
 * Auto Generated Stored Procedure class.
 * @author  Auto-Generated
 */
public class $(StoredProcedure.Upper1) extends Persistent implements IStoredProcedure {


#foreach $field in $Fields.values() #begin
    /** Holds value of property $(field.Name.Lower1). */
    private $(field.DataType) m_$(field.Name.Lower1);

#end

    // .//GEN-END:2_be

#foreach $field in $Fields.values() #begin
    // .//GEN-BEGIN:$(field.Name.Lower1)_be
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(field.DataType) get$(field.Name.Upper1)() {
        return m_$(field.Name.Lower1);
    }
    
    /** Setter for property $(field.Name.Lower1).
     * WARNING: This is strictly for use by the Persistence Engine. A developer should never use this method. Instead, use the update(field.Name.Upper1) method.
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1)) {
        m_$(field.Name.Lower1) = $(field.Name.Lower1);
    }
    
    /** Use this method to update the property $(field.Name.Lower1). Validation will be performed on the input value.
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     * @throws ValidationException if an invalid value is passed
     */
    public void update$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1))
    throws ValidationException {
        validate$(field.Name.Upper1)($(field.Name.Lower1));
        // .//GEN-END:$(field.Name.Lower1)_be
        // Add custom code before setting the value//GEN-FIRST:$(field.Name.Lower1)


        // .//GEN-LAST:$(field.Name.Lower1)
        // .//GEN-BEGIN:$(field.Name.Lower1)_1_be
        set$(field.Name.Upper1)($(field.Name.Lower1));
        // .//GEN-END:$(field.Name.Lower1)_1_be
        // Add custom code after setting the value//GEN-FIRST:$(field.Name.Lower1)_3


        // .//GEN-LAST:$(field.Name.Lower1)_3
        // .//GEN-BEGIN:$(field.Name.Lower1)_2_be
    }
    
    /** Use this method to validate a value for the property $(field.Name.Lower1).
     * @param $(field.Name.Lower1) Value to be validated for the property $(field.Name.Lower1).
     * @throws ValidationException if an invalid value is passed
     */
    public void validate$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1))
    throws ValidationException {
        // .//GEN-END:$(field.Name.Lower1)_2_be
        // Add custom code before validation//GEN-FIRST:$(field.Name.Lower1)_1


        // .//GEN-LAST:$(field.Name.Lower1)_1
        // .//GEN-BEGIN:$(field.Name.Lower1)_3_be

#if ($(field.DatabaseDataType.Upper) == "STRING" || $(field.DatabaseDataType.Upper) == "VARCHAR" || $(field.DatabaseDataType.Upper) == "LONGSTRING" || $(field.DatabaseDataType.Upper) == "LONGVARCHAR" || $(field.DatabaseDataType.Upper) == "CLOB") #begin
        FieldValidator.validate($(field.Name.Lower1), (StringFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "INTEGER" || $(field.DatabaseDataType.Upper) == "BIGINT") #begin
        FieldValidator.validate($(field.Name.Lower1), (IntegerFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DECIMAL" || $(field.DatabaseDataType.Upper) == "DOUBLE") #begin
        FieldValidator.validate($(field.Name.Lower1), (DecimalFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "BOOLEAN" || $(field.DatabaseDataType.Upper) == "BIT") #begin
        FieldValidator.validate($(field.Name.Lower1), (BooleanFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DATE_ONLY") #begin
        FieldValidator.validate($(field.Name.Lower1), (DateOnlyFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "DATE_TIME") #begin
        FieldValidator.validate($(field.Name.Lower1), (DateTimeFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "CURRENCY") #begin
        FieldValidator.validate($(field.Name.Lower1), (CurrencyFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#elseif ($(field.DatabaseDataType.Upper) == "RAW" || $(field.DatabaseDataType.Upper) == "LONGRAW" || $(field.DatabaseDataType.Upper) == "BLOB") #begin
        FieldValidator.validate($(field.Name.Lower1), (RawFieldMetaData) $(StoredProcedure.Upper1)Meta.META_$(field.Name.Static), true);
#else
        // do nothing
#end
        // .//GEN-END:$(field.Name.Lower1)_3_be
        // Add custom code after a successful validation//GEN-FIRST:$(field.Name.Lower1)_2


        // .//GEN-LAST:$(field.Name.Lower1)_2
        // .//GEN-BEGIN:$(field.Name.Lower1)_4_be
    }
    // .//GEN-END:$(field.Name.Lower1)_4_be
#end
    // .//GEN-BEGIN:stored-procedure-implementation-block_be

    /** This returns the diagnostic information.
    * @return the diagnostic information.
    */
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("<$(StoredProcedure.Upper1)>");

#foreach $field in $Fields.values() #begin
        buf.append("<$(field.Name.Lower1)>"); if (m_$(field.Name.Lower1) != null) buf.append(m_$(field.Name.Lower1)); buf.append("</$(field.Name.Lower1)>");
#end
        buf.append("</$(StoredProcedure.Upper1)>");
        return buf.toString();
    }




    // *** Implementation for the IStoredProcedure interface
    
    /** Returns an array of field names, which correspond to the parameters of the StoredProcedure.
     * @return An array of parameters to the StoredProcedure.
     */
    public String[] getParameters() {

#set $wm_array = ""
#set $firstPass = "true"
#foreach $field in $Fields.values() #begin
#if ($firstPass == "true") #begin
#set $firstPass = "false"
#else
#set $wm_array = "$(wm_array), "
#end
#set $wm_array = "$(wm_array)\"$(field.Name.Upper1)\""
#end
        return new String[] {$(wm_array)};
    }
    
    /** Returns an array of Strings signifying the SQL type for each of the parameter returned in the getParameters() method.
     * eg. STRING, BOOLEAN etc. etc.
     * @return An array of Strings signifying the SQL type of the parameters.
     */
    public String[] getParamSqlTypes() {

#set $wm_array = ""
#set $firstPass = "true"
#foreach $field in $Fields.values() #begin
#if ($firstPass == "true") #begin
#set $firstPass = "false"
#else
#set $wm_array = "$(wm_array), "
#end
#set $wm_array = "$(wm_array)\"$(field.DatabaseDataType.Upper)\""
#end
        return new String[] {$(wm_array)};
    }
    
    /** Returns an array of integers signifying the directions (input, output or input/output)
     * for each of the parameter returned in the getParameters() method.
     * @return An array of integers signifying the directions of the parameters.
     */
    public int[] getParamDirections() {

#set $wm_array = ""
#set $firstPass = "true"
#foreach $field in $Fields.values() #begin
#if ($firstPass == "true") #begin
#set $firstPass = "false"
#else
#set $wm_array = "$(wm_array), "
#end
#set $wm_array = "$(wm_array)$(field.Direction.Upper)"
#end
        return new int[] {$(wm_array)};
    }
    
    /** Returns a String having the call to the StoredProcedure.
     * @return a String having the call to the StoredProcedure.
     */
    public String prepareCall() {
        // .//GEN-END:stored-procedure-implementation-block_be
        // Add the call to the Stored Procedure//GEN-FIRST:prepareCall-block

        // @todo : Return the String of the type "{call ke_vcpkg1.getvoucher(?,?,?)}";
        return null;

        // .//GEN-LAST:prepareCall-block
    }

// All the custom code goes here//GEN-FIRST:custom






// .//GEN-LAST:custom
}
