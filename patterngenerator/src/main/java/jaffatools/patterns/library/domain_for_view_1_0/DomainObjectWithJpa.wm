// .//GEN-BEGIN:1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 * 
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/ 
package $(DomainPackage.Lower);

import org.apache.log4j.Logger;
import java.util.*;
import javax.xml.bind.annotation.*;
import javax.persistence.*;
import org.jaffa.datatypes.*;
import org.jaffa.datatypes.adapters.*;
import org.jaffa.metadata.*;
import org.jaffa.rules.RulesEngine;
import org.jaffa.persistence.*;
import org.jaffa.persistence.exceptions.*;
import org.jaffa.security.SecurityManager;
import org.jaffa.util.*;
import org.jaffa.beans.factory.config.StaticContext;
import org.jaffa.exceptions.FrameworkException;
import org.jaffa.exceptions.RelatedDomainObjectFoundException;
import org.jaffa.exceptions.DuplicateKeyException;
import org.jaffa.datatypes.exceptions.InvalidForeignKeyException;
import org.jaffa.exceptions.ApplicationExceptions;


#set $wm_typeDefRequired=""
#foreach $field in $Fields.values() #begin
#if($(field.DatabaseDataType.Upper) == "DATE_TIME" || $(field.DatabaseDataType.Upper) == "DATE_ONLY" || $(field.DatabaseDataType.Upper) == "BOOLEAN" || $(field.DatabaseDataType.Upper) == "BOOLEAN_YN") #begin
#set $wm_typeDefRequired="true"
#end
#end
#if ($wm_typeDefRequired == "true") #begin
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;
#end

#set $wm_primaryKeySignature=""
#set $wm_primaryKeyArguments=""
#set $wm_primaryKeyClass=""
#set $wm_primaryKeyProperty=""
#foreach $field in $Fields.values() #begin
#if ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue)) #begin
#if ($(wm_primaryKeySignature) != "") #begin
#set $wm_primaryKeySignature="$(wm_primaryKeySignature), "
#set $wm_primaryKeyArguments="$(wm_primaryKeyArguments), "
#end
#set $wm_primaryKeySignature="$(wm_primaryKeySignature)$(field.DataType) $(field.Name.Lower1)"
#set $wm_primaryKeyArguments="$(wm_primaryKeyArguments)$(field.Name.Lower1)"
#end
#end
#set $wm_primaryKeyClass="CompositeKey"
#set $wm_primaryKeyProperty="compositeKey"
#if (!$wm_primaryKeyArguments.contains(',') && $wm_primaryKeyArguments!="") #begin
#set $wm_primaryKeyClass=""
#end
#if ($wm_primaryKeyClass != "") #begin
import java.io.Serializable;
#end

#if ($(Relationships) != null) #begin
$ScratchPad.clear()
#foreach $relationship in $Relationships.values() #begin
#if ($(relationship.ToDomainPackage.Lower) != "") #begin
#set $wm_package = "$(relationship.ToDomainPackage.Lower).$(relationship.ToDomainObject.Upper1)"
#if ($ScratchPad.get($wm_package) == null) #begin
## the following 'if' statement is used to invoke the 'put' method
#if ($ScratchPad.put($wm_package,$wm_package) != null) #begin #end
import $(wm_package);
#end
#end
#end
#end
// .//GEN-END:1_be
// Add additional imports//GEN-FIRST:imports




// .//GEN-LAST:imports
// .//GEN-BEGIN:2_be
/**
 * Auto Generated Persistent class for the $(DatabaseTable) table.
 * @author  Auto-Generated
 */
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@Entity
@Table(name="$(DatabaseTable)")
@SqlResultSetMapping(name="$(DomainObject.Upper1)",entities={@EntityResult(entityClass=$(DomainObject.Upper1).class)})

#if ($wm_typeDefRequired == "true") #begin
@TypeDefs({@TypeDef(name="dateTimeType", typeClass=DateTimeType.class), @TypeDef(name="dateOnlyType", typeClass=DateOnlyType.class)})
#end
public class $(DomainObject.Upper1) extends Persistent {

    private static final Logger log = Logger.getLogger($(DomainObject.Upper1).class);

#if ($(wm_primaryKeyClass) != "") #begin

    /** Holds value of property m_$(wm_primaryKeyProperty). */
    @XmlElement(name="$(wm_primaryKeyProperty)")
    @EmbeddedId
    private $(wm_primaryKeyClass) m_$(wm_primaryKeyProperty);
    
#end

#foreach $field in $Fields.values() #begin
#if ($(field.Ignore) == null || !$(field.Ignore.BooleanValue)) #begin
    /** Holds value of property $(field.Name.Lower1). */

#if(($(wm_primaryKeyClass) == "" || ($(wm_primaryKeyClass) != "CompositeKey" && ($(field.PrimaryKey) == null || !$(field.PrimaryKey.BooleanValue))))) #begin
    @XmlElement(name="$(field.Name.JavaBeanStyle)")

#if($(wm_primaryKeyClass) == "" && $(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue)) #begin
    @Id

#if($(field.AutoGenerated) != null && $(field.AutoGenerated.BooleanValue) && $(field.DatabaseSequence) != null) #begin
    @GeneratedValue(strategy=GenerationType.AUTO, generator="$(field.DatabaseSequence.Upper)")
    @SequenceGenerator(name="$(field.DatabaseSequence.Upper)", sequenceName="$(field.DatabaseSequence.Upper)")
#end
#end
#if($(field.DatabaseDataType.Upper) == "BOOLEAN") #begin
    @Type(type="true_false")
#end
#if($(field.DatabaseDataType.Upper) == "BOOLEAN_YN") #begin
    @Type(type="yes_no")
#end
#if($(field.DatabaseDataType.Upper) == "DATE_TIME") #begin
    @Type(type="dateTimeType")
#end
#if($(field.DatabaseDataType.Upper) == "DATE_ONLY") #begin
    @Type(type="dateOnlyType")
#end
    @Column(name="$(field.DatabaseFieldName)")    
#else
    @Transient
#end    
    private $(field.DataType) m_$(field.Name.Lower1);

#end
#end

    /**
     * Default Constructor
     *
     * Calls the Static Context Factory to allow Spring to initialize this object
     */
    public $(DomainObject.Upper1)() {
        StaticContext.configure(this);
    }

    // .//GEN-END:2_be

#if ($(wm_primaryKeyClass) != "") #begin

    /** Getter for property m_$(wm_primaryKeyProperty).
     * @return Value of property m_$(wm_primaryKeyProperty).
     */
    public $(wm_primaryKeyClass) get$(wm_primaryKeyClass)() {
        return m_$(wm_primaryKeyProperty);
    }

    /** Setter for property m_$(wm_primaryKeyProperty).
     * @sets Value of property m_$(wm_primaryKeyProperty).
     */
    public void set$(wm_primaryKeyClass)($(wm_primaryKeyClass) $(wm_primaryKeyProperty)) {
        this.m_$(wm_primaryKeyProperty) = $(wm_primaryKeyProperty);
    }     
#end
#foreach $field in $Fields.values() #begin
#if ($field.Ignore == null || $field.Ignore.Lower != "true") #begin
    // .//GEN-BEGIN:$(field.Name.Lower1)_be
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(field.DataType) get$(field.Name.Upper1)() {

#if ($(wm_primaryKeyClass) == "" ||($(wm_primaryKeyClass) != "CompositeKey" && ($(field.PrimaryKey) == null || !$(field.PrimaryKey.BooleanValue)))) #begin
        return m_$(field.Name.Lower1);
#else 
        if(m_$(field.Name.Lower1)!=null){
            if(get$(wm_primaryKeyClass)() == null)
                set$(wm_primaryKeyClass)(new $(wm_primaryKeyClass)());

            get$(wm_primaryKeyClass)().set$(field.Name.Upper1)(m_$(field.Name.Lower1));
        }
        return get$(wm_primaryKeyClass)()!=null ? get$(wm_primaryKeyClass)().get$(field.Name.Upper1)() : null;
#end
    }
    
    /** Setter for property $(field.Name.Lower1).
     * WARNING: This is strictly for use by the Persistence Engine. A developer should never use this method. Instead, use the update(field.Name.Upper1) method.
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1)) {

#if ($(wm_primaryKeyClass) != "" && ($(wm_primaryKeyClass) == "CompositeKey" || ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue)))) #begin
        if(get$(wm_primaryKeyClass)() == null)
            set$(wm_primaryKeyClass)(new $(wm_primaryKeyClass)());
        
        get$(wm_primaryKeyClass)().set$(field.Name.Upper1)($(field.Name.Lower1));
#else
        m_$(field.Name.Lower1) = $(field.Name.Lower1);
#end
    }
    // .//GEN-END:$(field.Name.Lower1)_be
#end
#end
    // .//GEN-BEGIN:3_be
    /** This returns the diagnostic information.
    * @return the diagnostic information.
    */
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("<$(DomainObject.Upper1)>");

#foreach $field in $Fields.values() #begin
#if ($field.Ignore == null || $field.Ignore.Lower != "true") #begin
#if ($(wm_primaryKeyClass) != "" && ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue))) #begin
        buf.append("<$(field.Name.Lower1)>"); if (get$(field.Name.Upper1)() != null) buf.append(get$(field.Name.Upper1)()); buf.append("</$(field.Name.Lower1)>");
#else
        buf.append("<$(field.Name.Lower1)>"); if (m_$(field.Name.Lower1) != null) buf.append(m_$(field.Name.Lower1)); buf.append("</$(field.Name.Lower1)>");
#end
#end
#end
        buf.append(super.toString());
        buf.append("</$(DomainObject.Upper1)>");
        return buf.toString();
    }


#if ($(Relationships) != null) #begin
#foreach $relationship in $Relationships.values() #begin
#set $wm_fromFields = ""
#set $wm_firstPass = "true"
#foreach $field in $relationship.FromFields.values() #begin
#if ($(wm_firstPass) == "true") #begin
#set $wm_firstPass = "false"
#else
#set $wm_fromFields = "$(wm_fromFields),"
#end
#set $wm_fromFields = "$(wm_fromFields)$(field.Name.Lower1)"
#end
#set $wm_toFields = ""
#set $wm_firstPass = "true"
#foreach $field in $relationship.ToFields.values() #begin
#if ($(wm_firstPass) == "true") #begin
#set $wm_firstPass = "false"
#else
#set $wm_toFields = "$(wm_toFields),"
#end
#set $wm_toFields = "$(wm_toFields)$(field.Name.Lower1)"
#end
    /**
     * @clientCardinality $(relationship.FromCardinality)
     * @supplierCardinality $(relationship.ToCardinality)
     * @clientQualifier $(wm_fromFields)
     * @supplierQualifier $(wm_toFields)
     * @link $(relationship.Type)
     */
    /*#$(relationship.ToDomainObject.Upper1) lnk$(relationship.ToDomainObject.Upper1);*/

#end
#end
    // .//GEN-END:3_be
    // All the custom code goes here//GEN-FIRST:custom






    // .//GEN-LAST:custom

#if ($(wm_primaryKeyClass) != "") #begin

/**
 * Auto Generated Persistent class for the $(wm_primaryKeyClass).
 * @author  Auto-Generated
 */
    @Embeddable
    public static class $wm_primaryKeyClass implements Serializable{

#foreach $field in $Fields.values() #begin
#if (($(field.Ignore) == null || !$(field.Ignore.BooleanValue)) && ($(wm_primaryKeyClass) == "CompositeKey" || ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue)))) #begin
    
        /** Holds value of property $(field.Name.Lower1). */

#if($(field.DatabaseDataType.Upper) == "BOOLEAN") #begin
        @Type(type="true_false")
#end
#if($(field.DatabaseDataType.Upper) == "BOOLEAN_YN") #begin
        @Type(type="yes_no")
#end
#if($(field.DatabaseDataType.Upper) == "DATE_TIME") #begin
        @Type(type="dateTimeType")
#end
#if($(field.DatabaseDataType.Upper) == "DATE_ONLY") #begin
        @Type(type="dateOnlyType")
#end
        @Column(name="$(field.DatabaseFieldName)")
        private $(field.DataType) m_$(field.Name.Lower1);
#end
#end    
#foreach $field in $Fields.values() #begin
#if (($(field.Ignore) == null || !$(field.Ignore.BooleanValue)) && ($(wm_primaryKeyClass) == "CompositeKey" || ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue)))) #begin

        /** Getter for property m_$(field.Name.Lower1).
        * @return Value of property m_$(field.Name.Lower1).
        */
        public $(field.DataType) get$(field.Name.Upper1)() {
            return m_$(field.Name.Lower1);
        }  

        /** Setter for property m_$(field.Name.Lower1).
        * @sets Value of property m_$(field.Name.Lower1).
        */
        public void set$(field.Name.Upper1)($(field.DataType) $(field.Name.Lower1)){
            m_$(field.Name.Lower1) = $(field.Name.Lower1);
        }    
#end
#end
        /**
         * Compares this candidateKey with another candidateKey object.
         * Returns a true if both the objects have the same candidate key.
         *
         * @param obj the other Persistent object.
         * @return a true if both the objects have the same candidate key.
         */
        public boolean equals(Object obj) {
            if (obj != null && this.getClass() == obj.getClass()) {
                boolean equals = true;

#foreach $field in $Fields.values() #begin
#if (($(field.Ignore) == null || !$(field.Ignore.BooleanValue)) && ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue))) #begin
                equals = equals && (get$(field.Name.Upper1)() == null ? (($(DomainObject.Upper1).CompositeKey) obj).get$(field.Name.Upper1)() == null : get$(field.Name.Upper1)().equals((($(DomainObject.Upper1).CompositeKey) obj).get$(field.Name.Upper1)()));
#end
#end
                return equals;
            }
            return super.equals(obj);
        }

        /**
         * Returns the hashCode of this object based on it's candidate key.
         *
         * @return the hashCode of this object based on it's candidate key.
         */
        public int hashCode() {
            int i = 0;

#foreach $field in $Fields.values() #begin
#if (($(field.Ignore) == null || !$(field.Ignore.BooleanValue)) && ($(field.PrimaryKey) != null && $(field.PrimaryKey.BooleanValue))) #begin
            i += get$(field.Name.Upper1)()!=null ? get$(field.Name.Upper1)().hashCode() : 0;
#end
#end
            return i;
        } 
    }
#end    
}