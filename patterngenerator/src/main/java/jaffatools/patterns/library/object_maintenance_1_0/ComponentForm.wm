// .//GEN-BEGIN:_1_be
/******************************************************
 * Code Generated From JAFFA Framework Default Pattern
 *
 * The JAFFA Project can be found at http://jaffa.sourceforge.net
 * and is available under the Lesser GNU Public License
 ******************************************************/
package $(BasePackage.Lower).components.$(Component.Lower).ui;

import org.apache.log4j.Logger;
import org.jaffa.presentation.portlet.FormBase;
import javax.servlet.http.HttpServletRequest;
import org.jaffa.presentation.portlet.widgets.model.*;
import org.jaffa.presentation.portlet.widgets.controller.*;
import org.jaffa.metadata.*;
import org.jaffa.datatypes.*;
import java.util.*;
import org.jaffa.util.StringHelper;
import org.jaffa.components.codehelper.dto.*;
import org.jaffa.components.finder.*;

import $(DomainPackage.Lower).$(DomainObject.Upper1)Meta;

$ScratchPad.clear()
#if ($ForeignObjects != null) #begin
#foreach $foreignObject in $ForeignObjects.values() #begin
#set $wm_package = "$(foreignObject.Package.Lower).$(foreignObject.Object.Upper1)"
#if ($ScratchPad.get($wm_package) == null) #begin
## the following 'if' statement is used to invoke the 'put' method
#if ($ScratchPad.put($wm_package,$wm_package) != null) #begin #end
import $(wm_package)Meta;
#end

#foreach $field in $foreignObject.ForeignFields.values() #begin
#if ($(field.SourceChain) != null) #begin
#foreach $source in $field.SourceChain.values() #begin
#set $wm_package = "$(source.Package.Lower).$(source.Object.Upper1)"
#if ($ScratchPad.get($wm_package) == null) #begin
## the following 'if' statement is used to invoke the 'put' method
#if ($ScratchPad.put($wm_package,$wm_package) != null) #begin #end
import $(wm_package)Meta;
#end
#end
#end
#end
#end
#end
$ScratchPad.clear()
// .//GEN-END:_1_be
// Add additional imports//GEN-FIRST:_imports




// .//GEN-LAST:_imports
// .//GEN-BEGIN:_2_be
/** The FormBean class to support the maintenance jsp of the $(Component.Upper1).
 */
public class $(Component.Upper1)Form extends FormBase {
    /** The name constant used for determining the corresponding jsp through the struts-config file.
     */
    public static final String NAME = "$(Module.Lower)_$(Component.Lower1)";

    private static Logger log = Logger.getLogger($(Component.Upper1)Form.class);


#foreach $field in $Fields.values() #begin
#set $wm_widgetType = ""
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#elseif ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#end
    private $(wm_widgetType)Model w_$(field.Name.Lower1) = null;
#end

#if ($ForeignObjects != null) #begin
#foreach $foreignObject in $ForeignObjects.values() #begin
#foreach $field in $foreignObject.ForeignFields.values() #begin
#set $wm_widgetType = ""
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#elseif ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#end
    private $(wm_widgetType)Model w_$(field.Name.Lower1) = null;
#end
#end
#end


    /** Is this update mode, if so the key is display only, else this is create mode and the key is editable.
     * @return true if record is being updated, false if created.
     */
    public boolean isUpdateMode() {
        return (($(Component.Upper1)Component) getComponent()).isUpdateMode();
    }
    // .//GEN-END:_2_be
    // .//GEN-BEGIN:_initForm_1_be
    /** This method is invoked by the FormTag. It gets the data from the component.
     */
    public void initForm() {
        // .//GEN-END:_initForm_1_be
        // Add custom code //GEN-FIRST:_initForm_1


        // .//GEN-LAST:_initForm_1
        // .//GEN-BEGIN:_initForm_2_be
    }
    // .//GEN-END:_initForm_2_be

#foreach $field in $Fields.values() #begin
#set $wm_widgetType = ""
#set $wm_dataType = ""
#set $wm_domainObject = "$(DomainObject.Upper1)"
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "String"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Long"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Double"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#set $wm_dataType = "Boolean"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateOnly"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Currency"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Raw"
#end
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#end
    // .//GEN-BEGIN:$(field.Name.Lower1)_1_be
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(wm_dataType) get$(field.Name.Upper1)() {
        return ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)();
    }

    /** Setter for property $(field.Name.Lower1).
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($(wm_dataType) $(field.Name.Lower1)) {
        ( ($(Component.Upper1)Component) getComponent() ).set$(field.Name.Upper1)($(field.Name.Lower1));
    }

    /** Getter for property $(field.Name.Lower1). This is invoked by the custom tag, when the jsp is rendered, to get the current value.
     * @return Value of property $(field.Name.Lower1).
     */
    public $(wm_widgetType)Model get$(field.Name.Upper1)WM() {
        if (w_$(field.Name.Lower1) == null) {
            w_$(field.Name.Lower1) = ($(wm_widgetType)Model) getWidgetCache().getModel("$(field.Name.Lower1)");
            if (w_$(field.Name.Lower1) == null) {

#if ($field.Breakup != null && $wm_widgetType == "DropDown") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model("");

#if ($field.Breakup.StaticValues != null) #begin
#foreach $staticValue in $field.Breakup.StaticValues.values() #begin
                w_$(field.Name.Lower1).addOption("$(staticValue.Description)", "$(staticValue.Code)");
#end
#end

#if ($field.Breakup.DynamicValues != null) #begin
                CodeHelperOutElementDto dto = ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)Codes();
                if (dto != null && dto.getCodeHelperOutCodeDtoCount() > 0) {
                    CodeHelperOutCodeDto[] codes = dto.getCodeHelperOutCodeDtos();
                    for (int i = 0; i < codes.length; i++) {
                        CodeHelperOutCodeDto code = codes[i];
                        w_$(field.Name.Lower1).addOption(Formatter.format(code.getDescription()), Formatter.format(code.getCode()));
                    }
                }
#end

#elseif ($field.Breakup != null && $wm_widgetType == "Grid") #begin
                w_$(field.Name.Lower1) = new GridModel();
                Collection existingValues = null;
                Object code = null;
                GridModelRow row = null;
                if (get$(field.Name.Upper1)() != null)
                    existingValues = StringHelper.convertToList(get$(field.Name.Upper1)());

#if ($field.Breakup.StaticValues != null) #begin
#foreach $staticValue in $field.Breakup.StaticValues.values() #begin
                row = w_$(field.Name.Lower1).newRow();
                code = "$(staticValue.Code)";
                row.addElement("code", code);
                row.addElement("description", "$(staticValue.Description)");
                if (existingValues != null && existingValues.contains(code))
                    row.addElement("checked", new CheckBoxModel(true));
                else
                    row.addElement("checked", new CheckBoxModel(false));
#end
#end

#if ($field.Breakup.DynamicValues != null) #begin
                CodeHelperOutElementDto dto = ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)Codes();
                if (dto != null && dto.getCodeHelperOutCodeDtoCount() > 0) {
                    CodeHelperOutCodeDto[] codes = dto.getCodeHelperOutCodeDtos();
                    for (int i = 0; i < codes.length; i++) {
                        CodeHelperOutCodeDto codeDto = codes[i];
                        row = w_$(field.Name.Lower1).newRow();
                        code = codeDto.getCode();
                        row.addElement("code", code);
                        row.addElement("description", Formatter.format(codeDto.getDescription()));
                        if (existingValues != null && existingValues.contains(code))
                            row.addElement("checked", new CheckBoxModel(true));
                        else
                            row.addElement("checked", new CheckBoxModel(false));
                    }
                }
#end

#elseif ($wm_widgetType == "EditBox" && $(field.DomainField.Upper) != "") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), $(wm_domainObject)Meta.META_$(field.DomainField.Static));
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model($(wm_domainObject)Meta.META_$(field.DomainField.Static));
#elseif ($wm_dataType == "DateOnly" && $(field.DomainField.Upper) != "") #begin
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), (DateOnlyFieldMetaData) $(wm_domainObject)Meta.META_$(field.DomainField.Static));
#elseif ($wm_dataType == "DateTime" && $(field.DomainField.Upper) != "") #begin
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), (DateTimeFieldMetaData) $(wm_domainObject)Meta.META_$(field.DomainField.Static));
#elseif ($wm_widgetType == "CheckBox") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new CheckBoxModel( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new CheckBoxModel(false);
#else
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model();
#end
                // .//GEN-END:$(field.Name.Lower1)_1_be
                // Add custom code //GEN-FIRST:$(field.Name.Lower1)_1


                // .//GEN-LAST:$(field.Name.Lower1)_1
                // .//GEN-BEGIN:$(field.Name.Lower1)_2_be
                getWidgetCache().addModel("$(field.Name.Lower1)", w_$(field.Name.Lower1));
            }
        }
        return w_$(field.Name.Lower1);
    }

    /** Setter for property $(field.Name.Lower1). This is invoked by the servlet, when a post is done on the Criteria screen.
     * @param value New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)WV(String value) {
        $(wm_widgetType)Controller.updateModel(value, get$(field.Name.Upper1)WM());
    }
    // .//GEN-END:$(field.Name.Lower1)_2_be
#end

#if ($ForeignObjects != null) #begin
#foreach $foreignObject in $ForeignObjects.values() #begin
#foreach $field in $foreignObject.ForeignFields.values() #begin
#set $wm_widgetType = ""
#set $wm_dataType = ""
#set $wm_domainObject = "$(DomainObject.Upper1)"
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "String"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Long"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Double"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#set $wm_dataType = "Boolean"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateOnly"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateTime"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Currency"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Raw"
#end
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#end
    // .//GEN-BEGIN:$(field.Name.Lower1)_1_be
    /** Getter for property $(field.Name.Lower1).
     * @return Value of property $(field.Name.Lower1).
     */
    public $(wm_dataType) get$(field.Name.Upper1)() {
        return ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)();
    }

    /** Setter for property $(field.Name.Lower1).
     * @param $(field.Name.Lower1) New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)($(wm_dataType) $(field.Name.Lower1)) {
        ( ($(Component.Upper1)Component) getComponent() ).set$(field.Name.Upper1)($(field.Name.Lower1));
    }

    /** Getter for property $(field.Name.Lower1). This is invoked by the custom tag, when the jsp is rendered, to get the current value.
     * @return Value of property $(field.Name.Lower1).
     */
    public $(wm_widgetType)Model get$(field.Name.Upper1)WM() {

#set $wm_metaClass = "$(foreignObject.Object.Upper1)Meta"
#if ($field.SourceChain != null) #begin
#foreach $source in $field.SourceChain.values() #begin #end
#set $wm_metaClass = "$(source.Object.Upper1)Meta"
#end
        if (w_$(field.Name.Lower1) == null) {
            w_$(field.Name.Lower1) = ($(wm_widgetType)Model) getWidgetCache().getModel("$(field.Name.Lower1)");
            if (w_$(field.Name.Lower1) == null) {

#if ($field.Breakup != null && $wm_widgetType == "DropDown") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model("");

#if ($field.Breakup.StaticValues != null) #begin
#foreach $staticValue in $field.Breakup.StaticValues.values() #begin
                w_$(field.Name.Lower1).addOption("$(staticValue.Description)", "$(staticValue.Code)");
#end
#end

#if ($field.Breakup.DynamicValues != null) #begin
                CodeHelperOutElementDto dto = ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)Codes();
                if (dto != null && dto.getCodeHelperOutCodeDtoCount() > 0) {
                    CodeHelperOutCodeDto[] codes = dto.getCodeHelperOutCodeDtos();
                    for (int i = 0; i < codes.length; i++) {
                        CodeHelperOutCodeDto code = codes[i];
                        w_$(field.Name.Lower1).addOption(Formatter.format(code.getDescription()), Formatter.format(code.getCode()));
                    }
                }
#end

#elseif ($field.Breakup != null && $wm_widgetType == "Grid") #begin
                w_$(field.Name.Lower1) = new GridModel();
                Collection existingValues = null;
                Object code = null;
                GridModelRow row = null;
                if (get$(field.Name.Upper1)() != null)
                    existingValues = StringHelper.convertToList(get$(field.Name.Upper1)());

#if ($field.Breakup.StaticValues != null) #begin
#foreach $staticValue in $field.Breakup.StaticValues.values() #begin
                row = w_$(field.Name.Lower1).newRow();
                code = "$(staticValue.Code)";
                row.addElement("code", code);
                row.addElement("description", "$(staticValue.Description)");
                if (existingValues != null && existingValues.contains(code))
                    row.addElement("checked", new CheckBoxModel(true));
                else
                    row.addElement("checked", new CheckBoxModel(false));
#end
#end

#if ($field.Breakup.DynamicValues != null) #begin
                CodeHelperOutElementDto dto = ( ($(Component.Upper1)Component) getComponent() ).get$(field.Name.Upper1)Codes();
                if (dto != null && dto.getCodeHelperOutCodeDtoCount() > 0) {
                    CodeHelperOutCodeDto[] codes = dto.getCodeHelperOutCodeDtos();
                    for (int i = 0; i < codes.length; i++) {
                        CodeHelperOutCodeDto codeDto = codes[i];
                        row = w_$(field.Name.Lower1).newRow();
                        code = codeDto.getCode();
                        row.addElement("code", code);
                        row.addElement("description", Formatter.format(codeDto.getDescription()));
                        if (existingValues != null && existingValues.contains(code))
                            row.addElement("checked", new CheckBoxModel(true));
                        else
                            row.addElement("checked", new CheckBoxModel(false));
                    }
                }
#end

#elseif ($wm_widgetType == "EditBox") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), $(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model($(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
#elseif ($wm_dataType == "DateOnly") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), (DateOnlyFieldMetaData) $(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model((DateOnlyFieldMetaData) $(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
#elseif ($wm_dataType == "DateTime") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model(get$(field.Name.Upper1)(), (DateTimeFieldMetaData) $(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model((DateTimeFieldMetaData) $(wm_metaClass).META_$(field.DomainFieldInForeignObject.Static));
#elseif ($wm_widgetType == "CheckBox") #begin
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new CheckBoxModel( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new CheckBoxModel(false);
#else
                if (get$(field.Name.Upper1)() != null)
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model( get$(field.Name.Upper1)() );
                else
                    w_$(field.Name.Lower1) = new $(wm_widgetType)Model();
#end
                // .//GEN-END:$(field.Name.Lower1)_1_be
                // Add custom code //GEN-FIRST:$(field.Name.Lower1)_1


                // .//GEN-LAST:$(field.Name.Lower1)_1
                // .//GEN-BEGIN:$(field.Name.Lower1)_2_be
                getWidgetCache().addModel("$(field.Name.Lower1)", w_$(field.Name.Lower1));
            }
        }
        return w_$(field.Name.Lower1);
    }

    /** Setter for property $(field.Name.Lower1). This is invoked by the servlet, when a post is done on the Criteria screen.
     * @param value New value of property $(field.Name.Lower1).
     */
    public void set$(field.Name.Upper1)WV(String value) {
        $(wm_widgetType)Controller.updateModel(value, get$(field.Name.Upper1)WM());
    }
    // .//GEN-END:$(field.Name.Lower1)_2_be
#end
#end
#end
    // .//GEN-BEGIN:_doValidate_1_be
    /** This method should be invoked to ensure a valid state of the FormBean. It will validate the data in the models and set the corresponding properties.
     * Errors will be raised in the FormBean, if any validation fails.
     * @param request The request stream
     * @return A true indicates validations went through successfully. */
    public boolean doValidate(HttpServletRequest request) {
        boolean valid = true;

#foreach $field in $Fields.values() #begin
#if ($(field.DomainField.Upper) != "") #begin
#set $wm_widgetType = ""
#set $wm_dataType = ""
#set $wm_domainObject = "$(DomainObject.Upper1)"
#set $wm_meta = "$(wm_domainObject)Meta.META_$(field.DomainField.Static)"
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "String"
#set $wm_meta = "(StringFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Long"
#set $wm_meta = "(IntegerFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Double"
#set $wm_meta = "(DecimalFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#set $wm_dataType = "Boolean"
#set $wm_meta = "(BooleanFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateOnly"
#set $wm_meta = "(DateOnlyFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateTime"
#set $wm_meta = "(DateTimeFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Currency"
#set $wm_meta = "(CurrencyFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Raw"
#set $wm_meta = "(RawFieldMetaData) $(wm_meta)"
#end
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#end
        try {

#if ($(field.Mandatory.Lower) == "true") #begin
            boolean checkMandatory = true;
#else
            boolean checkMandatory = false;
#end

#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
            String value = null;
            StringBuffer buf = new StringBuffer();
            if (get$(field.Name.Upper1)WM().getRows() != null) {
                for (Iterator i = get$(field.Name.Upper1)WM().getRows().iterator(); i.hasNext(); ) {
                    GridModelRow row = (GridModelRow) i.next();
                    boolean checked = ((CheckBoxModel) row.getElement("checked")).getState();
                    if (checked) {
                        if (buf.length() > 0)
                            buf.append(',');
                        buf.append(row.getElement("code"));
                    }
                }
            }
            if (buf.length() > 0)
                value = buf.toString();
            value = (String) FieldValidator.validateData(value, $(wm_meta), checkMandatory);
#elseif ($wm_widgetType == "EditBox") #begin
            String htmlString = get$(field.Name.Upper1)WM().getValue();
            if (htmlString != null && htmlString.length() == 0)
                htmlString = null;
            $wm_dataType value = ($wm_dataType) FieldValidator.validateData(htmlString, $(wm_meta), checkMandatory);
#elseif ($wm_widgetType == "CheckBox") #begin
            $wm_dataType value = new Boolean(get$(field.Name.Upper1)WM().getState());
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#elseif ($wm_dataType == "DateOnly") #begin
            $wm_dataType value = get$(field.Name.Upper1)WM().getDateOnlyValue();
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#else
            $wm_dataType value = get$(field.Name.Upper1)WM().getValue();
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#end
            set$(field.Name.Upper1)(value);
        } catch (ValidationException e) {
            valid = false;
            raiseError(request, $(wm_domainObject)Meta.META_$(field.DomainField.Static).getLabelToken(), e);
        }
#end
#end

#if ($ForeignObjects != null) #begin
#foreach $foreignObject in $ForeignObjects.values() #begin
#foreach $field in $foreignObject.ForeignFields.values() #begin
#if ($(field.KeyType.Upper) == "PRIMARY" || $(field.KeyType.Upper) == "CANDIDATE") #begin
#set $wm_widgetType = ""
#set $wm_dataType = ""
#set $wm_domainObject = "$(foreignObject.Object.Upper1)"
#set $wm_meta = "$(wm_domainObject)Meta.META_$(field.DomainFieldInForeignObject.Static)"
#if ($field.SourceChain != null) #begin
#foreach $source in $field.SourceChain.values() #begin #end
#set $wm_domainObject = "$(source.Object.Upper1)"
#set $wm_meta = "$(source.Object.Upper1)Meta.META_$(field.DomainFieldInForeignObject.Static)"
#end
#if ($(field.DataType.Upper) == "STRING" || $(field.DataType.Upper) == "VARCHAR" || $(field.DataType.Upper) == "LONGSTRING" || $(field.DataType.Upper) == "LONGVARCHAR" || $(field.DataType.Upper) == "CLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "String"
#set $wm_meta = "(StringFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "INTEGER" || $(field.DataType.Upper) == "BIGINT") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Long"
#set $wm_meta = "(IntegerFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DECIMAL" || $(field.DataType.Upper) == "DOUBLE") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Double"
#set $wm_meta = "(DecimalFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "BOOLEAN" || $(field.DataType.Upper) == "BIT") #begin
#set $wm_widgetType = "CheckBox"
#set $wm_dataType = "Boolean"
#set $wm_meta = "(BooleanFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DATE_ONLY" || $(field.DataType.Upper) == "DATEONLY") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateOnly"
#set $wm_meta = "(DateOnlyFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "DATE_TIME" || $(field.DataType.Upper) == "DATETIME") #begin
#set $wm_widgetType = "DateTime"
#set $wm_dataType = "DateTime"
#set $wm_meta = "(DateTimeFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "CURRENCY") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Currency"
#set $wm_meta = "(CurrencyFieldMetaData) $(wm_meta)"
#elseif ($(field.DataType.Upper) == "RAW" || $(field.DataType.Upper) == "LONGRAW" || $(field.DataType.Upper) == "BLOB") #begin
#set $wm_widgetType = "EditBox"
#set $wm_dataType = "Raw"
#set $wm_meta = "(RawFieldMetaData) $(wm_meta)"
#end
#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "dropdown") #begin
#set $wm_widgetType = "DropDown"
#elseif ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
#set $wm_widgetType = "Grid"
#end
        try {

#if ($(field.Mandatory.Lower) == "true") #begin
            boolean checkMandatory = true;
#else
            boolean checkMandatory = false;
#end

#if ($field.Breakup != null && $field.Breakup.WidgetType.Lower == "checkbox") #begin
            String value = null;
            StringBuffer buf = new StringBuffer();
            if (get$(field.Name.Upper1)WM().getRows() != null) {
                for (Iterator i = get$(field.Name.Upper1)WM().getRows().iterator(); i.hasNext(); ) {
                    GridModelRow row = (GridModelRow) i.next();
                    boolean checked = ((CheckBoxModel) row.getElement("checked")).getState();
                    if (checked) {
                        if (buf.length() > 0)
                            buf.append(',');
                        buf.append(row.getElement("code"));
                    }
                }
            }
            if (buf.length() > 0)
                value = buf.toString();
            value = (String) FieldValidator.validateData(value, $(wm_meta), checkMandatory);
#elseif ($wm_widgetType == "EditBox") #begin
            String htmlString = get$(field.Name.Upper1)WM().getValue();
            if (htmlString != null && htmlString.length() == 0)
                htmlString = null;
            $wm_dataType value = ($wm_dataType) FieldValidator.validateData(htmlString, $(wm_meta), checkMandatory);
#elseif ($wm_widgetType == "CheckBox") #begin
            $wm_dataType value = new Boolean(get$(field.Name.Upper1)WM().getState());
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#elseif ($wm_dataType == "DateOnly") #begin
            $wm_dataType value = get$(field.Name.Upper1)WM().getDateOnlyValue();
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#else
            $wm_dataType value = get$(field.Name.Upper1)WM().getValue();
            value = FieldValidator.validate(value, $(wm_meta), checkMandatory);
#end
            set$(field.Name.Upper1)(value);
        } catch (ValidationException e) {
            valid = false;
            raiseError(request, $(wm_domainObject)Meta.META_$(field.DomainFieldInForeignObject.Static).getLabelToken(), e);
        }
#end
#end
#end
#end
        // .//GEN-END:_doValidate_1_be
        // Add custom validation code //GEN-FIRST:_doValidate_1




        // .//GEN-LAST:_doValidate_1
        // .//GEN-BEGIN:_doValidate_2_be
        return valid;
    }
    // .//GEN-END:_doValidate_2_be
    // All the custom code goes here //GEN-FIRST:_custom






    // .//GEN-LAST:_custom
}
